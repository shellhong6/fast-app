<!-- 本组件监听的事件：
setSearchInputValue: 设置搜索框的值
setSearchInputBlur: 让搜索框失焦
-->
<template>
  <div class="search-field-container">
    <input id='tempInput' type="button" name="" value="button" style='opacity:0;position:fixed;top:-100px;left:-100px;width:0;height:0;'>
    <div class="input-field-bg">
      <image class="search-icon" src="/Common/search-header/search.png" alt=""></image>
      <input id='searchInput' type="text" name="" value="{{searchInputVal}}" placeholder='{{placeholder}}' onchange='handlechange' onfocus="handleFocus" onblur="handleBlur"></input>
      <image class="search-clear {{searchClearCls}}" src="/Common/search-header/clear.png" alt="" onclick='handleClear'></image>
    </div>
  </div>
</template>

<style lang="less">
  @baseSize: 55px;
  @searchIconW: @baseSize;
  @searchIconH: @baseSize;
  @searchIconMl: 23px;
  @searchIconMr: 12px;
  @inputH: @baseSize;
  @inputFontSize: 40px;
  @searchClearWH: 70px;
  @searchClearMr: 14px;
  @searchClearMl: 4px;
  .search-field-container {
    width: 100%;
    flex-direction: row;
  }
  .input-field-bg{
    background-color: #f2f2f2;
    border: 1px solid #f2f2f2;
    border-radius: 100px;
    height: 100%;
    width: 100%;
    align-items: center;
    input{
      flex-shrink: 1;
      flex-grow: 1;
      font-size: @inputFontSize;
      height: @inputH;
      line-height: @inputH;
      color: #616161;
      placeholder-color: #888888;
    }
  }
  .search-icon{
    width: @searchIconW;
    height: @searchIconH;
    margin-left: @searchIconMl;
    margin-right: @searchIconMr;
  }
  .search-clear{
    width: @searchClearWH;
    height: @searchClearWH;
    margin-left: @searchClearMl;
    margin-right: @searchClearMr;
    opacity: 0;
  }
  .search-clear-searching{
    opacity: 1;
  }
</style>

<script>
  export default {
    data() {
      return {
        placeholder: '假如明天下雨',
        searchInputVal: '',
        searchClearCls: ''
      }
    },
    onInit() {
      this.$on('setSearchInputValue', this.setSearchInputValue.bind(this));
      this.$on('setSearchInputBlur', this.setSearchInputBlur.bind(this));
    },
    handleFocus(e) {
      this.$dispatch('setHeaderToSearching');
    },
    handleBlur() {
      this.$dispatch('setHeaderToNotSearching');
      this.searchClearCls = '';
    },
    handlechange(e) {
      this.searchInputVal = e.value;
      if(!this.searchInputVal){
        this.searchClearCls = '';
      }else{
        this.searchClearCls = 'search-clear-searching';
      }
      this.$dispatch('searchInputChange', {value: this.searchInputVal});
    },
    handleClear() {
      this.$emit('setSearchInputValue', {value: ''});
    },
    setSearchInputValue(e) {
      this.$emitElement('change', {value: e.detail.value}, 'searchInput');
      e && e.stop();
    },
    setSearchInputBlur(e) {
      this.$element('tempInput').focus({
        focus: true
      });
    }
  }
</script>
